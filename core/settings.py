"""
Django settings for django_polls project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import raven

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd9gr^r=$cyhf$qq&wx%up$_am0x17+2-o82*isvhkqy_uzutyp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'landing_page.apps.LandingPageConfig',
    'dashboard.apps.DashboardConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'raven.contrib.django.raven_compat',
]

MIDDLEWARE = [
    'landing_page.middleware.MultiSiteMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

MULTI_SITE_TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')

# base template structure
NEW_SITE_DEFAULT_TEMPLATE_PATH = os.path.join(MULTI_SITE_TEMPLATE_DIR, 'site_template_structure')


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [MULTI_SITE_TEMPLATE_DIR],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                'landing_page.template_loader.FilesystemLoader',
                'landing_page.template_loader.AppDirectoriesLoader',
            ],
            'builtins': ['landing_page.templatetags.landing_page_tags'],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'site_manager_db',
        'USER': 'siteuser',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "site_static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
SITE_STATIC_ROOT = os.path.join(BASE_DIR, 'site_static')

DEFAULT_SITE = {
    'domain': 'localsite.com',
    'name': 'Default Site'
}

DEFAULT_PAGES = ['index', 'privacy', 'terms']

ALL_SITES = [
    {
        'domain': 'healthplansdirecttoyou.com',
        'name': 'Local Site 001'
    },
    {
        'domain': 'healthplansdirecttome.com',
        'name': 'Local Site 002'
    },
    {
        'domain': 'healthplansdirectsecure.com',
        'name': 'Local Site 003'
    },
    {
        'domain': 'healthplansdirectsatisfaction.com',
        'name': 'Local Site 004'
    },
    {
        'domain': 'healthplansdirectquote.com',
        'name': 'Local Site 005'
    },
    {
        'domain': 'healthplansdirector.com',
        'name': 'Local Site 006'
    },
    {
        'domain': 'healthplansdirectnow.com',
        'name': 'Local Site 007'
    },
    {
        'domain': 'healthplansdirectinsurance.com',
        'name': 'Local Site 008'
    },
    {
        'domain': 'healthplansdirected.com',
        'name': 'Local Site 009'
    },

    # {
    #     'domain': 'healthplansdirectagent.com',
    #     'name': 'Local Site 010'
    # },
]

LOCAL_IP_ADDR = '127.0.0.1:8013'

# AUTH SETTINGS
AUTH_USER_MODEL = 'dashboard.User'


# PROFILES SETTINGS
GROUP_ADMIN = 'admin'

GROUP_EDITOR = 'editor'

PROFILE_GROUPS = (GROUP_ADMIN, GROUP_EDITOR)

# page type
SITE_REGISTERED_APP_LABELS = (
    ('landing_page', 'Static Landing Page'),
)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'
LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/dashboard/'
REMOTE_TARGET_DOMAIN = 'https://www.nationshealthinsurance.com/'


# CELERY SETTINGS

REDIS_HOST = 'localhost'
REDIS_PORT = '6379'

CELERY_ACCEPT_CONTENT = ['json', 'pickle']
BROKER_URL = os.environ.get('REDIS_URL', 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0')
CELERY_TASK_LOCK_EXPIRE = 60 * 10 * 6  # Lock expires in 10 * x minutes
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 12  # 12 hours
# CELERY_IMPORTS = ("tasks", )

#LOGGING

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'sysfmt': {
            'format': '%(name)s %(name)s - %(levelname)s: %(message)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_true']
        },
        'syslog': {
            'level': 'DEBUG',
            'class': 'logging.handlers.SysLogHandler',
            'formatter': 'sysfmt',
            'address': (os.environ.get('RSYSLOG_HOST', 'localhost'), os.environ.get('RSYSLOG_PORT', 514))
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'siteToLc': {
            'handlers': ['console', 'syslog'],
            'level': 'INFO',
            'propagate': False,
        }
    }
}

# Sentry

RAVEN_CONFIG = {
    'dsn': 'https://4cf08ac3f077495bbed066c52f50ee61:3169a1e89f0441fca72444c0518382cd@sentry.io/1164181',
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    # 'release': raven.fetch_git_sha(os.path.abspath(os.pardir)),
}
